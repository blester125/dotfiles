#!/usr/bin/python3

import argparse
import textwrap


def setup(name, title, package, uname):
    return textwrap.dedent("""
        import ast
        from typing import Optional
        from setuptools import setup, find_packages


        def get_version(file_name: str, version_name: str = "__version__") -> Optional[str]:
            with open(file_name) as f:
                tree = ast.parse(f.read())
                for node in ast.walk(tree):
                    if isinstance(node, ast.Assign):
                        if node.targets[0].id == version_name:
                            return node.value.s
            raise ValueError(f"Couldn't find assignment to variable {{version_name}} in file {{file_name}}")


        class About(object):
            NAME="{name}"
            VERSION=get_version("{package}/__init__.py")
            AUTHOR="{name}"
            EMAIL=f"{{AUTHOR}}@gmail.com"
            URL=f"https://github.com/{{AUTHOR}}/{{NAME}}"
            DL_URL=f"{{URL}}/archive/{{VERSION}}.tar.gz"
            LICENSE="MIT"
            DESCRIPTION="{title}"


        ext_modules = [
        ]


        setup(
            name=About.NAME,
            version=About.VERSION,
            description=About.DESCRIPTION,
            long_description=open('README.md').read(),
            long_description_content_type="text/markdown",
            author=About.AUTHOR,
            author_email=About.EMAIL,
            url=About.URL,
            download_url=About.DL_URL,
            license=About.LICENSE,
            python_requires='>=3.6',
            packages=find_packages(),
            package_data={{
                "{package}": [
                ],
            }},
            include_package_data=True,
            install_requires=[
            ],
            extras_require={{
                "test": ["pytest"],
            }},
            keywords=[],
            ext_modules=ext_modules,
            entry_points={{
                "console_scripts": [
                ],
            }},
            classifiers={{
                "Development Status :: 3 - Alpha",
                "Environment :: Console",
                "Intended Audience :: Developers",
                "Intended Audience :: Science/Research",
                "License :: OSI Approved :: MIT License",
                "Natural Language :: English",
                "Programming Language :: Python :: 3 :: Only",
                "Topic :: Scientific/Engineering",
            }},
        )
    """.format(name=name, title=title, package=package, uname=uname).lstrip("\n"))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--project_name", "--project-name", required=True)
    parser.add_argument("--project_title", "--project-title", required=True, nargs="+")
    parser.add_argument("--project_package", "--project-package", required=True)
    parser.add_argument("--uname", required=True)
    args = parser.parse_args()

    with open("setup.py", 'w') as f:
        f.write(setup(args.project_name, " ".join(args.project_title), args.project_package, args.uname))


if __name__ == "__main__":
    main()
