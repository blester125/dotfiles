if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'nvie/vim-flake8'
Plug 'vim-scripts/indentpython.vim'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'tmhedberg/SimpylFold'
Plug 'airblade/vim-gitgutter'
Plug 'davidhalter/jedi-vim'
Plug 'tpope/vim-commentary'
Plug 'w0rp/ale'
Plug 'ervandew/supertab'
Plug 'tpope/vim-surround'
Plug 'terryma/vim-smooth-scroll'
Plug 'kien/ctrlp.vim'
Plug 'aserebryakov/vim-todo-lists'
Plug 'leafgarland/typescript-vim'
Plug 'JuliaEditorSupport/julia-vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'jceb/vim-orgmode'
Plug 'lervag/vimtex'

call plug#end()

set ruler

set tabstop=4
set expandtab
set shiftwidth=4

set fileformat=unix
set encoding=utf8
set ai

set smartcase
set showmatch
set mat=2

set spell spelllang=en_us
set spellcapcheck=
hi clear spellCap
hi clear SpellRare
hi clear SpellLocal
hi clear SpellBad
hi SpellBad cterm=underline
hi SpellRare cterm=none
hi SpellCap cterm=none
hi SpellLocal cterm=none

"Use cython highlighting in pyd files
au BufRead,BufNewFile *.pyd set filetype=pyrex

set hlsearch

"enable folding
"set foldcolumn=1
" set foldmethod=indent
set foldlevel=99
let g:SimpylFold_doc_string_preview=1

syntax enable
set background=dark

set backup
set backupdir=/tmp//,.
set directory=/tmp//,.
set undodir=/tmp//,.

set wrap

set clipboard=unnamedplus

"Window behavior
set splitbelow
set splitright
nnoremap <C-H> <C-W><C-H>
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>

" I often keep holding shift when I try to quit
command! Q q
command! W w

"map <Left> <Nop>
"map <Right> <Nop>
"map <Up> <Nop>
"map <Down> <Nop>

"map <LeftMouse> <Nop>
"map <MiddleMouse> <Nop>
"map <RightMouse> <Nop>

"NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Hide *.pyc, __pycache__, and .egg files in nerdtree
let NERDTreeIgnore=['\.pyc$', '\~$', '__pycache__', 'MachineLearning.egg-info', '\.DS_Store', '\~$', '\.swp', '.git', '.mypy_cache', 'build', 'reporting-*.log', 'timing-*.log']
set wildignore+=reporting-*.log,timing-*.log
let NERDTreeRespectWildIgnore=1
" Open Nerdtree automatically
autocmd vimenter * NERDTree
autocmd vimenter * wincmd w
" Close Nerdtree if no files specified
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

let NERDTreeMapActivateNode=';'
let NERDTreeShowHidden=1
let g:NERDTreeWinSize=20

let g:NERDSpaceDelims=1
let g:NERDCommentEmptyLines=1

set cursorline
hi CursorLine ctermbg=8 cterm=None
set cursorcolumn
hi CursorColumn ctermbg=8

"Highlight the first character over 80
highlight 80Column ctermbg=darkgreen ctermfg=black
highlight 100Column ctermbg=darkyellow ctermfg=black
highlight 120Column ctermbg=darkred ctermfg=black
call matchadd('80Column', '\%81v', -1)
call matchadd('100Column', '\%101v', -1)
call matchadd('120Column', '\%121v', -1)
"Highlight training whitespace
highlight ExtraWhitespace ctermbg=green
match ExtraWhitespace /\s\+\%#\@<!$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

"Line Numbering
set number relativenumber
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter * set norelativenumber
augroup END

inoremap        (  ()<Left>
inoremap <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"

inoremap        {  {}<Left>
inoremap <expr> }  strpart(getline('.'), col('.')-1, 1) == "}" ? "\<Right>" : "}"

inoremap        [  []<Left>
inoremap <expr> ]  strpart(getline('.'), col('.')-1, 1) == "]" ? "\<Right>" : "]"

inoremap <expr> ' strpart(getline('.'), col('.')-1, 1) == "\'" ? "\<Right>" : "\'\'\<Left>"

inoremap <expr> " strpart(getline('.'), col('.')-1, 1) == "\"" ? "\<Right>" : "\"\"\<Left>"

" ALE
let g:ale_linters = {'python': ['pylint']}
let g:ale_python_pycodestyle_executable = 'pycodestyle'
let g:ale_python_pycodestyle_options = '--config=$HOME/.pycodestyle'
let g:ale_sign_warning = '▲'
let g:ale_sign_error = '✗'
" let g:ale_sign_column_always=1
highlight link ALEWarningSign String
highlight link ALEErrorSign Title"

"ctags
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

if has('cscope')
  set cscopetag cscopeverbose

  if has('quickfix')
    set cscopequickfix=s-,c-,d-,i-,t-,e-
  endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
endif

"Virtualenv
"let g:virtualenv#directory="/home/blester"
" noremap Q !!$SHELL<CR>

let g:jedi#show_call_signatures = "2"
let g:jedi#popup_select_first = 0
let g:jedi#smart_auto_mappings = 0

"turn off bracket paste mode
set t_BE=

"Ctrlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/__pycache__/*,*/.git/*     " MacOSX/Linux
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(pyc|exe|so|dll)$',
  \ 'link': '',
  \ }
" crtl-o runs ctrlp from the current working directory (useful for when you
" are a submodule for a large git project and only want to search below you).
noremap <C-o> :CtrlP :pwd<CR>


"Latex to unicode
let g:latex_to_unicode_file_types = ["markdown"]

highlight GitGutterAdd    guifg=#009900 ctermfg=2
highlight GitGutterChange guifg=#bbbb00 ctermfg=3
highlight GitGutterDelete guifg=#ff2222 ctermfg=1

"Black
" let g:black_linelength = 120
" let g:black_skip_string_normalization = 1
" autocmd BufWritePre *.py execute ':Black'

au BufRead,BufNewFile *.tex setlocal textwidth=120
au BufRead,BufNewFile *.md setlocal textwidth=120

" Tex plugins
let g:vimtex_fold_enabled = 1
lef g:tex_flavor = 'latex'
